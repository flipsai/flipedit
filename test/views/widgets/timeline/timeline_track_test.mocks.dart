// Mocks generated by Mockito 5.4.6 from annotations
// in flipedit/test/views/widgets/timeline/timeline_track_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flipedit/models/clip.dart' as _i5;
import 'package:flipedit/models/enums/clip_type.dart' as _i9;
import 'package:flipedit/models/enums/edit_mode.dart' as _i6;
import 'package:flipedit/services/project_database_service.dart' as _i3;
import 'package:flipedit/viewmodels/commands/timeline_command.dart' as _i8;
import 'package:flipedit/viewmodels/timeline_viewmodel.dart' as _i4;
import 'package:fluent_ui/fluent_ui.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueNotifier_0<T> extends _i1.SmartFake
    implements _i2.ValueNotifier<T> {
  _FakeValueNotifier_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScrollController_1 extends _i1.SmartFake
    implements _i2.ScrollController {
  _FakeScrollController_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProjectDatabaseService_2 extends _i1.SmartFake
    implements _i3.ProjectDatabaseService {
  _FakeProjectDatabaseService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TimelineViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimelineViewModel extends _i1.Mock implements _i4.TimelineViewModel {
  MockTimelineViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<List<_i5.ClipModel>> get clipsNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#clipsNotifier),
            returnValue: _FakeValueNotifier_0<List<_i5.ClipModel>>(
              this,
              Invocation.getter(#clipsNotifier),
            ),
          )
          as _i2.ValueNotifier<List<_i5.ClipModel>>);

  @override
  List<int> get currentTrackIds =>
      (super.noSuchMethod(
            Invocation.getter(#currentTrackIds),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  _i2.ValueNotifier<double> get zoomNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#zoomNotifier),
            returnValue: _FakeValueNotifier_0<double>(
              this,
              Invocation.getter(#zoomNotifier),
            ),
          )
          as _i2.ValueNotifier<double>);

  @override
  _i2.ValueNotifier<int> get currentFrameNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#currentFrameNotifier),
            returnValue: _FakeValueNotifier_0<int>(
              this,
              Invocation.getter(#currentFrameNotifier),
            ),
          )
          as _i2.ValueNotifier<int>);

  @override
  _i2.ValueNotifier<int> get totalFramesNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#totalFramesNotifier),
            returnValue: _FakeValueNotifier_0<int>(
              this,
              Invocation.getter(#totalFramesNotifier),
            ),
          )
          as _i2.ValueNotifier<int>);

  @override
  _i2.ValueNotifier<bool> get isPlayingNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#isPlayingNotifier),
            returnValue: _FakeValueNotifier_0<bool>(
              this,
              Invocation.getter(#isPlayingNotifier),
            ),
          )
          as _i2.ValueNotifier<bool>);

  @override
  _i2.ScrollController get trackContentHorizontalScrollController =>
      (super.noSuchMethod(
            Invocation.getter(#trackContentHorizontalScrollController),
            returnValue: _FakeScrollController_1(
              this,
              Invocation.getter(#trackContentHorizontalScrollController),
            ),
          )
          as _i2.ScrollController);

  @override
  _i2.ValueNotifier<double> get trackLabelWidthNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#trackLabelWidthNotifier),
            returnValue: _FakeValueNotifier_0<double>(
              this,
              Invocation.getter(#trackLabelWidthNotifier),
            ),
          )
          as _i2.ValueNotifier<double>);

  @override
  _i2.ValueNotifier<_i6.EditMode> get currentEditMode =>
      (super.noSuchMethod(
            Invocation.getter(#currentEditMode),
            returnValue: _FakeValueNotifier_0<_i6.EditMode>(
              this,
              Invocation.getter(#currentEditMode),
            ),
          )
          as _i2.ValueNotifier<_i6.EditMode>);

  @override
  List<_i5.ClipModel> get clips =>
      (super.noSuchMethod(
            Invocation.getter(#clips),
            returnValue: <_i5.ClipModel>[],
          )
          as List<_i5.ClipModel>);

  @override
  double get zoom =>
      (super.noSuchMethod(Invocation.getter(#zoom), returnValue: 0.0)
          as double);

  @override
  int get currentFrame =>
      (super.noSuchMethod(Invocation.getter(#currentFrame), returnValue: 0)
          as int);

  @override
  bool get isPlaying =>
      (super.noSuchMethod(Invocation.getter(#isPlaying), returnValue: false)
          as bool);

  @override
  _i2.ValueNotifier<bool> get canUndoNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#canUndoNotifier),
            returnValue: _FakeValueNotifier_0<bool>(
              this,
              Invocation.getter(#canUndoNotifier),
            ),
          )
          as _i2.ValueNotifier<bool>);

  @override
  _i2.ValueNotifier<bool> get canRedoNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#canRedoNotifier),
            returnValue: _FakeValueNotifier_0<bool>(
              this,
              Invocation.getter(#canRedoNotifier),
            ),
          )
          as _i2.ValueNotifier<bool>);

  @override
  _i3.ProjectDatabaseService get projectDatabaseService =>
      (super.noSuchMethod(
            Invocation.getter(#projectDatabaseService),
            returnValue: _FakeProjectDatabaseService_2(
              this,
              Invocation.getter(#projectDatabaseService),
            ),
          )
          as _i3.ProjectDatabaseService);

  @override
  set currentTrackIds(List<int>? _currentTrackIds) => super.noSuchMethod(
    Invocation.setter(#currentTrackIds, _currentTrackIds),
    returnValueForMissingStub: null,
  );

  @override
  set zoom(double? value) => super.noSuchMethod(
    Invocation.setter(#zoom, value),
    returnValueForMissingStub: null,
  );

  @override
  set currentFrame(int? value) => super.noSuchMethod(
    Invocation.setter(#currentFrame, value),
    returnValueForMissingStub: null,
  );

  @override
  void setEditMode(_i6.EditMode? mode) => super.noSuchMethod(
    Invocation.method(#setEditMode, [mode]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> runCommand(_i8.TimelineCommand? cmd) =>
      (super.noSuchMethod(
            Invocation.method(#runCommand, [cmd]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> undo() =>
      (super.noSuchMethod(
            Invocation.method(#undo, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> redo() =>
      (super.noSuchMethod(
            Invocation.method(#redo, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> startPlayback() =>
      (super.noSuchMethod(
            Invocation.method(#startPlayback, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void stopPlayback() => super.noSuchMethod(
    Invocation.method(#stopPlayback, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> loadClipsForProject(int? projectId) =>
      (super.noSuchMethod(
            Invocation.method(#loadClipsForProject, [projectId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void updateClipsAfterPlacement(List<_i5.ClipModel>? updatedClips) =>
      super.noSuchMethod(
        Invocation.method(#updateClipsAfterPlacement, [updatedClips]),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<bool> placeClipOnTrack({
    int? clipId,
    required int? trackId,
    required _i9.ClipType? type,
    required String? sourcePath,
    required int? sourceDurationMs,
    required int? startTimeOnTrackMs,
    required int? endTimeOnTrackMs,
    required int? startTimeInSourceMs,
    required int? endTimeInSourceMs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#placeClipOnTrack, [], {
              #clipId: clipId,
              #trackId: trackId,
              #type: type,
              #sourcePath: sourcePath,
              #sourceDurationMs: sourceDurationMs,
              #startTimeOnTrackMs: startTimeOnTrackMs,
              #endTimeOnTrackMs: endTimeOnTrackMs,
              #startTimeInSourceMs: startTimeInSourceMs,
              #endTimeInSourceMs: endTimeInSourceMs,
            }),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> handleClipDropToEmptyTimeline({
    required _i5.ClipModel? clip,
    required int? startTimeOnTrackMs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#handleClipDropToEmptyTimeline, [], {
              #clip: clip,
              #startTimeOnTrackMs: startTimeOnTrackMs,
            }),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateTrackName(int? trackId, String? newName) =>
      (super.noSuchMethod(
            Invocation.method(#updateTrackName, [trackId, newName]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> handleClipDrop({
    required _i5.ClipModel? clip,
    required int? trackId,
    required int? startTimeOnTrackMs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#handleClipDrop, [], {
              #clip: clip,
              #trackId: trackId,
              #startTimeOnTrackMs: startTimeOnTrackMs,
            }),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> refreshClips() =>
      (super.noSuchMethod(
            Invocation.method(#refreshClips, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void recalculateAndUpdateTotalFrames() => super.noSuchMethod(
    Invocation.method(#recalculateAndUpdateTotalFrames, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateTrackLabelWidth(double? newWidth) => super.noSuchMethod(
    Invocation.method(#updateTrackLabelWidth, [newWidth]),
    returnValueForMissingStub: null,
  );

  @override
  void onDispose() => super.noSuchMethod(
    Invocation.method(#onDispose, []),
    returnValueForMissingStub: null,
  );
}
